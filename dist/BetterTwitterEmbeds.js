const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const j=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const z=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const w=o.Text;o.TextInput,o.TouchableHighlight;const p=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const y=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const $=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const r=o.FormRow,h=o.FormSection;o.FormSelect,o.FormSubLabel;const L=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;function G(e){window.enmity.plugins.registerPlugin(e)}function x(e,t,i){window.enmity.settings.set(e,t,i)}function D(e,t,i){return window.enmity.settings.get(e,t,i)}function H(e){return window.enmity.patcher.create(e)}var W="BetterTwitterEmbeds",X="1.1.4",q="patch-1.0.9",J="Convert Twitter links to FxTwitter links so the tweet embed is better.",K=[{name:"spin",id:"308440976723148800"}],Q="#ff0069",Z="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/BetterTwitterEmbeds.js",I={name:W,version:X,build:q,description:J,authors:K,color:Q,sourceUrl:Z};const u=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets;const ee=window.enmity.modules.common.Messages;window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const f=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const v=window.enmity.modules.common.Storage,g=window.enmity.modules.common.Toasts,C=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const A=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const te=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const B=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;const R=e=>{let t=0;for(let i in e)t++;return t},ne=e=>{let t=e.split(`
`).map(i=>{if(i!="")return`"${i.replaceAll(":",'":"').replace(" ","")}",`});return t[0]=`{${t[0]}`,t[R(t)]=`${t[R(t)]}}`,t=t.join(""),t=t.replaceAll("undefined",""),t=t.split("").reverse().join("").replace(",","").split("").reverse().join(""),t};async function oe(){try{let e=await v.getItem("device_list");if(e)return JSON.parse(e);let t=(await A.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,i=ne(t);await v.setItem("device_list",i);let a=await v.getItem("device_list");return JSON.parse(a)}catch(e){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${e}]`);return}}async function ie(e,t,i){let a=await oe();return`**[${e}] Debug Information**
> **Plugin Version:** ${t}
> **Plugin Build:** ${i.split("-")[1]}
> **Discord Build:** ${f.InfoDictionaryManager.Version} (${f.InfoDictionaryManager.Build})
> **Software Version:** ${f.DCDDeviceManager.systemVersion}
> **Device:** ${a[f.DCDDeviceManager.device]}`}function l(e){return window.enmity.assets.getIDByName(e)}const m={Debug:l("debug"),Retry:l("ic_message_retry"),Failed:l("Small"),Cancel:l("ic_megaphone_nsfw_16px"),Add:l("add_white"),Delete:l("ic_message_delete"),Copy:l("toast_copy_link"),Open:l("ic_leave_stage"),Clipboard:l("pending-alert"),Debug_Command:{Sent:l("ic_application_command_24px"),Clock:l("clock")},Settings:{Toasts:{Context:l("toast_image_saved"),Settings:l("ic_selection_checked_24px")},Share:l("share"),Commands:l("ic_profile_badge_bot_commands"),Debug:l("ic_rulebook_16px")}},F=e=>{g.open({content:`Copied ${e} to clipboard.`,source:m.Clipboard})},S={byProps:(...e)=>window.enmity.modules.filters.byProps(...e),byName:(e,t)=>window.enmity.modules.filters.byName(e,t),byTypeName:(e,t)=>window.enmity.modules.filters.byTypeName(e,t),byDisplayName:(e,t)=>window.enmity.modules.filters.byDisplayName(e,t)};function N(...e){return window.enmity.modules.bulk(...e)}function ae(...e){return window.enmity.modules.getByProps(...e)}window.enmity.modules.common;const{native:b}=window.enmity;function se(){b.reload()}b.version,b.build,b.device,b.version;const re=ae("transitionToGuild");async function le({manifest:e}){const t=`${e.sourceUrl}?${Math.floor(Math.random()*1001)}.js`,i=await(await A.get(t)).text;let a=i.match(/\d\.\d\.\d+/g),s=i.match(/patch\-\d\.\d\.\d+/g);return!a||!s?V(e.name,e.version):(a=a[0],s=s[0],a!=e.version?k(t,a,s.split("-")[1],e,!1):s!=e.build?k(t,a,s.split("-")[1],e,!0):V(e.name,e.version))}const k=(e,t,i,a,s)=>{const d=s?i:t;C.show({title:"Update found",body:`A newer ${s?"build":"version"} is available for ${a.name}. ${s?`
The version will remain at ${t}, but the build will update to ${i}.`:""}
Would you like to install ${s?`build \`${i}\``:`version \`${t}\``}  now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>me(e,d,a,s)})},V=(e,t)=>{console.log(`[${e}] Plugin is on the latest version, which is ${t}`),g.open({content:`${e} is on latest version (${t})`,source:m.Settings.Toasts.Settings})};async function me(e,t,i,a){window.enmity.plugins.installPlugin(e,({data:s})=>{s=="installed_plugin"||s=="overridden_plugin"?C.show({title:`Updated ${i.name}`,body:`Successfully updated to ${a?"build":"version"} \`${t}\`. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Not now",onConfirm:()=>{se()}}):C.show({title:"Error",body:`Something went wrong while updating ${i.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{re.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${i.name}%20Update%20Error%3A%20${a?`b${t}`:`v${t}`}`)}})})}const _=window.enmity.modules.common.Components.General.Animated,[E,ce]=N(S.byProps("transitionToGuild"),S.byProps("setString"));var de=({manifest:e})=>{const t=B.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25},header:{color:u.ThemeColorMap.HEADER_PRIMARY,fontFamily:u.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:u.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),i=n.useRef(new _.Value(1)).current,a=()=>{_.spring(i,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},s=()=>{_.spring(i,{toValue:1,duration:250,useNativeDriver:!0}).start()},d=()=>{E.openURL("https://spin.rip/")},T={transform:[{scale:i}]};return n.createElement(n.Fragment,null,n.createElement(y,{style:t.container},n.createElement(p,{onPress:d,onPressIn:a,onPressOut:s},n.createElement(_.View,{style:[T]},n.createElement(j,{style:[t.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement(y,{style:t.text_container},n.createElement(p,{onPress:()=>{E.openURL(e.sourceUrl)}},n.createElement(w,{style:[t.main_text,t.header]},e.name," ")),n.createElement(y,{style:{flexDirection:"row"}},n.createElement(w,{style:[t.main_text,t.sub_header]},"A plugin by"),n.createElement(p,{onPress:()=>{E.openURL("https://spin.rip/")}},n.createElement(w,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:u.Fonts.DISPLAY_BOLD}]},e.authors[0].name))),n.createElement(y,{style:{flexDirection:"row"}},n.createElement(w,{style:[t.main_text,t.sub_header]},"Settings page by"),n.createElement(p,{onPress:()=>{E.openURL("https://github.com/acquitelol/")}},n.createElement(w,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:u.Fonts.DISPLAY_BOLD}]},"Acquite <3"))),n.createElement(y,null,n.createElement(p,{style:{flexDirection:"row"},onPress:()=>{ce.setString(`**${e.name}** v${e.version}`),F("plugin name and version")}},n.createElement(w,{style:[t.main_text,t.sub_header]},"Version:"),n.createElement(w,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:u.Fonts.DISPLAY_BOLD}]},e.version," "))))))};const[ue,U]=N(S.byProps("transitionToGuild"),S.byProps("setString"));var we=({manifest:e,settings:t,hasToasts:i,section:a,commands:s})=>{const d=B.createThemedStyleSheet({icon:{color:u.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:u.ThemeColorMap.TEXT_MUTED},text_container:{display:"flex",flexDirection:"column"}}),[T,O]=n.useState(),[P,Y]=n.useState();return n.createElement(n.Fragment,null,n.createElement(z,{onTouchStart:c=>{O(c.nativeEvent.pageX),Y(c.nativeEvent.pageY)},onTouchEnd:c=>{T-c.nativeEvent.pageX<-100&&P-c.nativeEvent.pageY<40&&P-c.nativeEvent.pageY>-40&&te.pop()}},n.createElement(de,{manifest:e}),a,s&&n.createElement(h,{title:"Plugin Commands"},s.map(c=>n.createElement(r,{label:`/${c.name}`,subLabel:c.description,leading:n.createElement(r.Icon,{style:d.icon,source:m.Settings.Commands}),trailing:r.Arrow,onPress:function(){U.setString(`/${c.name}`),F(`the command ${c.name}`)}}))),n.createElement(h,{title:"Utility"},i&&n.createElement(n.Fragment,null,n.createElement(r,{label:"Initialization Toasts",leading:n.createElement(r.Icon,{style:d.icon,source:m.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${e.name} is starting`,trailing:n.createElement(L,{value:t.getBoolean(`${e.name}-toastEnable`,!1),onValueChange:()=>{t.toggle(`${e.name}-toastEnable`,!1),g.open({content:`Successfully ${t.getBoolean(`${e.name}-toastEnable`,!1)?"enabled":"disabled"} initialization toasts.`,source:m.Settings.Toasts.Settings})}})}),n.createElement($,null)),n.createElement(r,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${e.name} to clipboard.`,leading:n.createElement(r.Icon,{style:d.icon,source:m.Settings.Debug}),trailing:r.Arrow,onPress:async function(){U.setString(await ie(e.name,e.version,e.build)),F("plugin debug information")}}),n.createElement($,null),n.createElement(r,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(r.Icon,{style:d.icon,source:m.Delete}),trailing:r.Arrow,onPress:async function(){await v.removeItem("device_list"),g.open({content:"Cleared device list storage.",source:m.Settings.Toasts.Settings})}})),n.createElement(h,{title:"Source"},n.createElement(r,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${e.name}.`,leading:n.createElement(r.Icon,{style:d.icon,source:m.Copy}),trailing:r.Arrow,onPress:()=>{le({manifest:e})}}),n.createElement($,null),n.createElement(r,{label:"Source",subLabel:`View ${e.name} source code`,leading:n.createElement(r.Icon,{style:d.icon,source:m.Open}),trailing:r.Arrow,onPress:()=>{ue.openURL(`https://github.com/spinfal/enmity-plugins/tree/master/${e.name}`)}})),n.createElement(r,{label:`Plugin Version: ${e.version}
Plugin Build: ${e.build.split("-").pop()}`})))};const M=H("BTE"),ge={...I,onStart(){try{D("_twitter","_type",!1)||x("_twitter","_type","fxtwitter"),M.before(ee,"sendMessage",(e,t,i)=>{const a=t[1].content;!a.match(/http(s)?:\/\/twitter.com\/\w{4,15}\/status\/\d+/gim)||(t[1].content=a.replace(/http(s)?:\/\/twitter.com/gim,`https://${D("_twitter","_type",!1)}.com`))})}catch(e){console.log("[ BetterTwitterEmbeds Error ]",e)}},onStop(){M.unpatchAll()},patches:[],getSettingsPanel({settings:e}){return n.createElement(we,{manifest:I,settings:e,hasToasts:!1,section:n.createElement(h,{title:"Plugin Settings"},n.createElement(r,{label:"Use vxtwitter.com instead of fxtwitter.com",leading:n.createElement(r.Icon,{source:m.Copy}),trailing:n.createElement(L,{value:e.getBoolean("_vxtwitter",!1),onValueChange:()=>{try{e.toggle("_vxtwitter",!1),e.getBoolean("_vxtwitter",!1)?x("_twitter","_type","vxtwitter"):x("_twitter","_type","fxtwitter"),g.open({content:`Switched to ${D("_twitter","_type",!1)}.`,source:m.Settings.Toasts.Settings})}catch(t){console.log("[ BetterTwitterEmbeds Error ]",t),g.open({content:"An error has occurred. Check debug logs for more info.",source:m.Failed})}}})})),commands:null})}};G(ge);
