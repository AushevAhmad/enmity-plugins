function X(e){window.enmity.plugins.registerPlugin(e)}var J="PetPet",K="1.0.3",Q="Generate a petpet gif from a given image",Z=[{name:"spin",id:"308440976723148800"}],A="#ff0069",O="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/PetPet.js",M={name:J,version:K,description:Q,authors:Z,color:A,sourceUrl:O},T;(function(e){e[e.BuiltIn=0]="BuiltIn",e[e.Guild=1]="Guild",e[e.DM=2]="DM"})(T||(T={}));var U;(function(e){e[e.Chat=1]="Chat",e[e.User=2]="User",e[e.Message=3]="Message"})(U||(U={}));var B;(function(e){e[e.BuiltIn=0]="BuiltIn",e[e.BuiltInText=1]="BuiltInText",e[e.BuiltInIntegration=2]="BuiltInIntegration",e[e.Bot=3]="Bot",e[e.Placeholder=4]="Placeholder"})(B||(B={}));var k;(function(e){e[e.Role=1]="Role",e[e.User=2]="User"})(k||(k={}));var h;(function(e){e[e.SubCommand=1]="SubCommand",e[e.SubCommandGroup=2]="SubCommandGroup",e[e.String=3]="String",e[e.Integer=4]="Integer",e[e.Boolean=5]="Boolean",e[e.User=6]="User",e[e.Channel=7]="Channel",e[e.Role=8]="Role",e[e.Mentionnable=9]="Mentionnable",e[e.Number=10]="Number",e[e.Attachment=11]="Attachment"})(h||(h={}));var V;(function(e){e[e.ApplicationCommand=2]="ApplicationCommand",e[e.MessageComponent=3]="MessageComponent"})(V||(V={}));const _={byProps:(...e)=>window.enmity.modules.filters.byProps(...e),byName:(e,t)=>window.enmity.modules.filters.byName(e,t),byTypeName:(e,t)=>window.enmity.modules.filters.byTypeName(e,t),byDisplayName:(e,t)=>window.enmity.modules.filters.byDisplayName(e,t)};function G(...e){return window.enmity.modules.bulk(...e)}function ee(...e){return window.enmity.modules.getByProps(...e)}window.enmity.modules.common;function x(e,t,s,l){window.enmity.clyde.sendReply(e,t,s,l)}const g=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const z=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const P=window.enmity.modules.common.Storage,F=window.enmity.modules.common.Toasts,I=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const N=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const te=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const Y=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;const ne={id:"petpet-command",name:"petpet",displayName:"petpet",description:"Generate a petpet gif from a given image",displayDescription:"Generate a petpet gif from a given image",type:U.Chat,inputType:B.BuiltInText,options:[{name:"url",displayName:"url",description:"The URL of the image to petpet",displayDescription:"The URL of the image to petpet",type:h.String,required:!1},{name:"user",displayName:"user",description:"Grab a user's avatar to petpet",displayDescription:"Grab a user's avatar to petpet",type:h.User,required:!1},{name:"size",displayName:"size",description:"Change the size of the petpet gif. Max is 512. Defaults to 100, higher values equal larger files and potentially no Discord embeds",displayDescription:"Change the size of the petpet gif. Max is 512. Defaults to 100, higher values equal larger files and potentially no Discord embeds",type:h.Integer,required:!1},{name:"delay",displayName:"delay",description:"The delay between each frame, defaults to 20",displayDescription:"The delay between each frame, defaults to 20",type:h.Integer,required:!1},{name:"whisper",displayName:"whisper",description:"Only you can see the result",displayDescription:"Only you can see the result",type:h.Boolean,required:!1}],execute:async function(e,t){var s,l,m,f,v;const u=e[e.findIndex(r=>r.name==="url")],w=e[e.findIndex(r=>r.name==="user")],i=e[e.findIndex(r=>r.name==="size")],E=e[e.findIndex(r=>r.name==="delay")],D=e[e.findIndex(r=>r.name==="whisper")],W="v2";if(!u&&!w)return x((s=t==null?void 0:t.channel.id)!=null?s:"0","No argument provided, nothing will happen. Here's a banana instead \u{1F34C}");try{const r=await N.get(`https://petpet-api.clit.repl.co/petpet?url=${u!=null&&u.value?u.value:ee("getUser").getUser(w==null?void 0:w.value).getAvatarURL().split("?")[0].replace(/gif|webp/,"png")}&size=${i?i.value:100}&delay=${E?E.value:20}&version=${W}`).then(R=>R.body);if(r.status==!0){const R={type:"rich",image:{proxy_url:r==null?void 0:r.result,url:r==null?void 0:r.result,width:i?i.value:100,height:i?i.value:100},footer:{text:`Files are purged every 24 hours \u2022 Powered by ${r==null?void 0:r.github}`},color:"0xff0069"};if((l=D==null?void 0:D.value)==null||l){x((m=t==null?void 0:t.channel.id)!=null?m:"0",{embeds:[R]});return}else return{content:r==null?void 0:r.result}}else console.log("[ PetPet Fetch Response ]",r,r==null?void 0:r.status),console.log("[ PetPet Arguments ]",u,w,i,E,D),x((f=t==null?void 0:t.channel.id)!=null?f:"0","Something went wrong, please try again later. Fetch response and PetPet arguments sent to console.")}catch(r){console.log("[ PetPet Error ]",r),console.log("[ PetPet Arguments ]",u,w,i,E,D),x((v=t==null?void 0:t.channel.id)!=null?v:"0","An error occured while fetching and preparing the petpet image. Check debug logs for more info.")}}},oe=[ne],{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const se=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const re=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const y=o.Text;o.TextInput,o.TouchableHighlight;const b=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const p=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const C=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const a=o.FormRow,q=o.FormSection;o.FormSelect,o.FormSubLabel;const ie=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;const j=e=>{let t=0;for(let s in e)t++;return t},ae=e=>{let t=e.split(`
`).map(s=>{if(s!="")return`"${s.replaceAll(":",'":"').replace(" ","")}",`});return t[0]=`{${t[0]}`,t[j(t)]=`${t[j(t)]}}`,t=t.join(""),t=t.replaceAll("undefined",""),t=t.split("").reverse().join("").replace(",","").split("").reverse().join(""),t};async function le(){try{let e=await P.getItem("device_list");if(e)return JSON.parse(e);let t=(await N.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,s=ae(t);await P.setItem("device_list",s);let l=await P.getItem("device_list");return JSON.parse(l)}catch(e){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${e}]`);return}}async function ce(e,t){let s=await le();return`**[${e}] Debug Information**
> **Plugin Version:** ${t}
> **Software Version:** ${z.DCDDeviceManager.systemVersion}
> **Device:** ${s[z.DCDDeviceManager.device]}`}function c(e){return window.enmity.assets.getIDByName(e)}const d={Debug:c("debug"),Retry:c("ic_message_retry"),Failed:c("Small"),Cancel:c("ic_megaphone_nsfw_16px"),Delete:c("ic_message_delete"),Copy:c("toast_copy_link"),Open:c("ic_leave_stage"),Clipboard:c("pending-alert"),Debug_Command:{Sent:c("ic_application_command_24px"),Clock:c("clock")},Settings:{Toasts:{Context:c("toast_image_saved"),Settings:c("ic_selection_checked_24px")},Debug:c("ic_rulebook_16px")}},H=e=>{F.open({content:`Copied ${e} to clipboard.`,source:d.Clipboard})},{native:S}=window.enmity;function me(){S.reload()}S.version,S.build,S.device,S.version;async function ue({manifest:e}){const t=`${e.sourceUrl}?${Math.floor(Math.random()*1001)}.js`;let s=(await(await N.get(t)).text).match(/[0-9].[0-9].[0-9]/g);!s||(s=s[0].replaceAll('"',""),s!=e.version?de(t,s,e):ge(e.name,e.version))}const de=(e,t,s)=>{I.show({title:"Update found",body:`A newer version is available for ${s.name}.
Would you like to install version ${t} now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>we(e,t,s)})},ge=(e,t)=>{console.log(`[${e}] is on the latest version (${t})`),F.open({content:`${e} is on the latest version (${t})`,source:d.Delete})};async function we(e,t,s){window.enmity.plugins.installPlugin(pluginUrl,({data:l})=>{console.log(`${s.name} Update Error`,l),l=="installed-plugin"||l=="overriden-plugin"?I.show({title:`Updated ${s.name}`,body:`Successfully updated to version ${s.version}. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Later",onConfirm:()=>{me()}}):I.show({title:"Error",body:`Something went wrong while updating ${s.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{I.close()},onCancel:()=>{Router.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${s.name}%20Update%20Error`)}})})}const $=window.enmity.modules.common.Components.General.Animated,[L,he]=G(_.byProps("transitionToGuild"),_.byProps("setString"));var ye=({manifest:e})=>{const t=Y.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25},header:{color:g.ThemeColorMap.HEADER_PRIMARY,fontFamily:g.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:g.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),s=n.useRef(new $.Value(1)).current,l=()=>{$.spring(s,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},m=()=>{$.spring(s,{toValue:1,duration:250,useNativeDriver:!0}).start()},f=()=>{L.openURL("https://spin.rip/")},v={transform:[{scale:s}]};return n.createElement(n.Fragment,null,n.createElement(p,{style:t.container},n.createElement(b,{onPress:f,onPressIn:l,onPressOut:m},n.createElement($.View,{style:[v]},n.createElement(se,{style:[t.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement(p,{style:t.text_container},n.createElement(b,{onPress:()=>{L.openURL(e.sourceUrl)}},n.createElement(y,{style:[t.main_text,t.header]},e.name," ")),n.createElement(p,{style:{flexDirection:"row"}},n.createElement(y,{style:[t.main_text,t.sub_header]},"A plugin by"),n.createElement(b,{onPress:()=>{L.openURL("https://spin.rip/")}},n.createElement(y,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},e.authors[0].name))),n.createElement(p,{style:{flexDirection:"row"}},n.createElement(y,{style:[t.main_text,t.sub_header]},"Settings page by"),n.createElement(b,{onPress:()=>{L.openURL("https://github.com/acquitelol/")}},n.createElement(y,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},"Acquite <3"))),n.createElement(p,null,n.createElement(b,{style:{flexDirection:"row"},onPress:()=>{he.setString(`**${e.name}** v${e.version}`),H("plugin name and version")}},n.createElement(y,{style:[t.main_text,t.sub_header]},"Version:"),n.createElement(y,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},e.version," "))))))};const[fe,ve]=G(_.byProps("transitionToGuild"),_.byProps("setString"));var be=({manifest:e,settings:t,hasToasts:s,section:l})=>{const m=Y.createThemedStyleSheet({icon:{color:g.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:g.ThemeColorMap.TEXT_MUTED}}),[f,v]=n.useState(),[u,w]=n.useState();return n.createElement(n.Fragment,null,n.createElement(re,{onTouchStart:i=>{v(i.nativeEvent.pageX),w(i.nativeEvent.pageY)},onTouchEnd:i=>{f-i.nativeEvent.pageX<-100&&u-i.nativeEvent.pageY<40&&u-i.nativeEvent.pageY>-40&&te.pop()}},n.createElement(ye,{manifest:e}),l,n.createElement(q,{title:"Utility"},s&&n.createElement(n.Fragment,null,n.createElement(a,{label:"Initialization Toasts",leading:n.createElement(a.Icon,{style:m.icon,source:d.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${e.name} is starting`,trailing:n.createElement(ie,{value:t.getBoolean(`${e.name}-toastEnable`,!1),onValueChange:()=>{t.toggle(`${e.name}-toastEnable`,!1),F.open({content:`Successfully ${t.getBoolean(`${e.name}-toastEnable`,!1)?"enabled":"disabled"} Initialization Toasts.`,source:d.Settings.Toasts.Settings})}})}),n.createElement(C,null)),n.createElement(a,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${e.name} to clipboard.`,leading:n.createElement(a.Icon,{style:m.icon,source:d.Settings.Debug}),trailing:a.Arrow,onPress:async function(){ve.setString(await ce(e.name,e.version)),H("plugin debug information")}}),n.createElement(C,null),n.createElement(a,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(a.Icon,{style:m.icon,source:d.Delete}),trailing:a.Arrow,onPress:async function(){await P.removeItem("device_list"),F.open({content:"Cleared device list storage.",source:d.Settings.Toasts.Settings})}})),n.createElement(q,{title:"Source"},n.createElement(a,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${e.name}.`,leading:n.createElement(a.Icon,{style:m.icon,source:d.Copy}),trailing:a.Arrow,onPress:()=>{ue({manifest:e})}}),n.createElement(C,null),n.createElement(a,{label:"Source",subLabel:`View ${e.name} source code`,leading:n.createElement(a.Icon,{style:m.icon,source:d.Open}),trailing:a.Arrow,onPress:()=>{fe.openURL(`https://github.com/spinfal/enmity-plugins/tree/master/${e.name}`)}})),n.createElement(a,{label:`Plugin Version: ${e.version}`})))};const pe={...M,onStart(){this.commands=oe},onStop(){this.commands=[]},patches:[],getSettingsPanel({settings:e}){return n.createElement(be,{manifest:M,settings:e,hasToasts:!1,section:[]})}};X(pe);
