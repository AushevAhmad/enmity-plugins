function T(o){window.enmity.plugins.registerPlugin(o)}function E(o){return window.enmity.plugins.installPlugin(o)}function _(o,s){return window.enmity.modules.getModule(o,s)}function u(...o){return window.enmity.modules.getByProps(...o)}window.enmity.modules.common;function F(o){return window.enmity.patcher.create(o)}var b="NoDelete",M="1.3.7",A='Basic "Message Logger"',N=[{name:"Marek (modified by spin)",id:"308440976723148800"}],C="#ff0069",P="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/NoDelete.js",h={name:b,version:M,description:A,authors:N,color:C,sourceUrl:P};function a(o){return window.enmity.assets.getIDByName(o)}window.enmity.modules.common.Constants,window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars,window.enmity.modules.common.Native;const w=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher,window.enmity.modules.common.Storage,window.enmity.modules.common.Toasts;const L=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token,window.enmity.modules.common.REST,window.enmity.modules.common.Settings,window.enmity.modules.common.Users,window.enmity.modules.common.Navigation,window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking,window.enmity.modules.common.StyleSheet,window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;const{components:e}=window.enmity;e.Alert,e.Button,e.FlatList,e.Image,e.ImageBackground,e.KeyboardAvoidingView,e.Modal,e.Pressable,e.RefreshControl;const U=e.ScrollView;e.SectionList,e.StatusBar,e.StyleSheet,e.Switch,e.Text,e.TextInput,e.TouchableHighlight,e.TouchableOpacity,e.TouchableWithoutFeedback,e.Touchable,e.View,e.VirtualizedList,e.Form,e.FormArrow,e.FormCTA,e.FormCTAButton,e.FormCardSection,e.FormCheckbox,e.FormDivider,e.FormHint,e.FormIcon,e.FormInput,e.FormLabel,e.FormRadio;const S=e.FormRow;e.FormSection,e.FormSelect,e.FormSubLabel,e.FormSwitch,e.FormTernaryCheckBox,e.FormText,e.FormTextColors,e.FormTextSizes;const{native:r}=window.enmity;function k(){r.reload()}r.version,r.build,r.device,r.version;var x=({pluginUrl:o})=>w.createElement(S,{label:"Update Plugin",trailing:S.Arrow,onPress:()=>{console.log(o),E(`${o}?${Math.floor(Math.random()*1001)}.js`),L.show({title:"Plugin Update",body:"Updating the plugin using this button will require you to reload Discord. Would you like to reload Discord now?",confirmText:"Yep!",cancelText:"Later",onConfirm:k})}});const g=F("NoDelete"),d=_(o=>o.open!==void 0&&o.close!==void 0&&!o.openLazy&&!o.startDrag&&!o.init&&!o.openReplay&&!o.openChannelCallPopout),B={...h,patches:[],onStart(){let o=0,s=3;const y=()=>{try{o++;const m=u("_currentDispatchActionType","_subscriptions","_actionHandlers","_waitQueue"),p=u("getMessage","getMessages"),f=u("getChannel","getDMFromUserId");console.log(`NoDelete delayed start attempt ${o}/${s}.`),d.open({content:`NoDelete start attempt ${o}/${s}.`,source:a("debug")});for(const i of["MESSAGE_UPDATE","MESSAGE_DELETE"])try{m.dispatch({type:i,message:{}})}catch(n){console.log("[NoDelete Dispatch Error]",n)}const D=m._actionHandlers._orderedActionHandlers.MESSAGE_DELETE.find(i=>i.name==="MessageStore"),v=m._actionHandlers._orderedActionHandlers.MESSAGE_UPDATE.find(i=>i.name==="MessageStore");g.before(D,"actionHandler",(i,n)=>{const t=p.getMessage(n[0].channelId,n[0].id);if(n[0]={},!(t!=null&&t.editedTimestamp)||(t==null?void 0:t.editedTimestamp._isValid)){const l={type:"MESSAGE_UPDATE",message:{...t,edited_timestamp:"invalid_timestamp",content:t.content+" `[deleted]`",guild_id:f.getChannel(t.channel_id).guild_id},log_edit:!1};m.dispatch(l)}}),g.before(v,"actionHandler",(i,n)=>{var t,l;try{if(n[0].log_edit==!1)return;const c=p.getMessage(n[0].message.channel_id,n[0].message.id);if(!((l=(t=n[0])==null?void 0:t.message)!=null&&l.content))return;try{if(!n[0].edited_timestamp._isValid)return}catch{}n[0].message.content=c.content+" `[edited]`\n"+n[0].message.content;return}catch(c){console.log("[NoDelete Error]",c)}}),console.log("NoDelete delayed start successful."),d.open({content:"NoDelete delayed start successful.",source:a("Check")})}catch(m){console.log("[NoDelete Plugin Error]",m),o<s?(console.warn(`NoDelete failed to start. Trying again in ${o}0s.`),d.open({content:`NoDelete failed to start trying again in ${o}0s.`,source:a("ic_message_retry")}),setTimeout(y,o*1e4)):(console.error("NoDelete failed to start. Giving up."),d.open({content:"NoDelete failed to start. Giving up.",source:a("Small")}))}};setTimeout(()=>{y()},300)},onStop(){g.unpatchAll()},getSettingsPanel({settings:o}){return w.createElement(U,{settings:o},w.createElement(x,{pluginUrl:h.sourceUrl}))}};T(B);
