function H(t){window.enmity.plugins.registerPlugin(t)}const D={byProps:(...t)=>window.enmity.modules.filters.byProps(...t),byName:(t,e)=>window.enmity.modules.filters.byName(t,e),byTypeName:(t,e)=>window.enmity.modules.filters.byTypeName(t,e),byDisplayName:(t,e)=>window.enmity.modules.filters.byDisplayName(t,e)};function M(...t){return window.enmity.modules.bulk(...t)}function R(...t){return window.enmity.modules.getByProps(...t)}window.enmity.modules.common;function Y(t){return window.enmity.patcher.create(t)}const w=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const f=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const h=window.enmity.modules.common.Storage,y=window.enmity.modules.common.Toasts,T=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const B=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const j=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const N=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;var z="AmongUs",W="1.0.3",X="patch-1.0.12",q="sus",J=[{name:"amogus",id:"308440976723148800"}],K="#ff0069",Q="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/AmongUs.js",d={name:z,version:W,build:X,description:q,authors:J,color:K,sourceUrl:Q};function Z(t,e,i){return window.enmity.settings.getBoolean(t,e,i)}const U=t=>{let e=0;for(let i in t)e++;return e},ee=t=>{let e=t.split(`
`).map(i=>{if(i!="")return`"${i.replaceAll(":",'":"').replace(" ","")}",`});return e[0]=`{${e[0]}`,e[U(e)]=`${e[U(e)]}}`,e=e.join(""),e=e.replaceAll("undefined",""),e=e.split("").reverse().join("").replace(",","").split("").reverse().join(""),e};async function V(){try{let t=await h.getItem("device_list");if(t)return JSON.parse(t);let e=(await B.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,i=ee(e);await h.setItem("device_list",i);let a=await h.getItem("device_list");return JSON.parse(a)}catch(t){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${t}]`);return}}async function te(t,e,i){let a=await V();return`**[${t}] Debug Information**
> **Plugin Version:** ${e}
> **Plugin Build:** ${i.split("-")[1]}
> **Discord Build:** ${f.InfoDictionaryManager.Version} (${f.InfoDictionaryManager.Build})
> **Software Version:** ${f.DCDDeviceManager.systemVersion}
> **Device:** ${a[f.DCDDeviceManager.device]}`}function r(t){return window.enmity.assets.getIDByName(t)}const c={Debug:r("debug"),Retry:r("ic_message_retry"),Failed:r("Small"),Cancel:r("ic_megaphone_nsfw_16px"),Add:r("add_white"),Delete:r("ic_message_delete"),Clear:r("ic_clear_all_24px"),Pencil:r("ic_pencil_24px"),Copy:r("toast_copy_link"),Open:r("ic_leave_stage"),Clipboard:r("pending-alert"),Debug_Command:{Sent:r("ic_application_command_24px"),Clock:r("clock")},Settings:{Toasts:{Context:r("toast_image_saved"),Settings:r("ic_selection_checked_24px")},Share:r("share"),Commands:r("ic_profile_badge_bot_commands"),Debug:r("ic_rulebook_16px")}},P=t=>{y.open({content:`Copied ${t} to clipboard.`,source:c.Clipboard})},{native:_}=window.enmity;function ne(){_.reload()}_.version,_.build,_.device,_.version;const oe=R("transitionToGuild");async function ie({manifest:t}){const e=`${t.sourceUrl}?${Math.floor(Math.random()*1001)}.js`,i=await(await B.get(e)).text;let a=i.match(/\d\.\d\.\d+/g),s=i.match(/patch\-\d\.\d\.\d+/g);return!a||!s?O(t.name,t.version):(a=a[0],s=s[0],a!=t.version?k(e,a,s.split("-")[1],t,!1):s!=t.build?k(e,a,s.split("-")[1],t,!0):O(t.name,t.version))}const k=(t,e,i,a,s)=>{const u=s?i:e;T.show({title:"Update found",body:`A newer ${s?"build":"version"} is available for ${a.name}. ${s?`
The version will remain at ${e}, but the build will update to ${i}.`:""}
Would you like to install ${s?`build \`${i}\``:`version \`${e}\``}  now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>ae(t,u,a,s)})},O=(t,e)=>{console.log(`[${t}] Plugin is on the latest version, which is ${e}`),y.open({content:`${t} is on latest version (${e})`,source:c.Settings.Toasts.Settings})};async function ae(t,e,i,a){window.enmity.plugins.installPlugin(t,({data:s})=>{s=="installed_plugin"||s=="overridden_plugin"?T.show({title:`Updated ${i.name}`,body:`Successfully updated to ${a?"build":"version"} \`${e}\`. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Not now",onConfirm:()=>{ne()}}):T.show({title:"Error",body:`Something went wrong while updating ${i.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{oe.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${i.name}%20Update%20Error%3A%20${a?`b${e}`:`v${e}`}`)}})})}async function se(t){let e=f.DCDDeviceManager.device,i=await V();e.includes("iPhone")&&(e=e.replace("iPhone",""),e=e.replace(",","."),(parseFloat(e)<10.6&&parseFloat(e)!=10.3||parseFloat(e)==14.6||parseFloat(e)==12.8)&&h.getItem(`__${t.name}_incompatible_dialog__`).then(a=>{a!=null||T.show({title:"Incompatible iPhone",body:`Please note that you're on an${i[f.DCDDeviceManager.device]}.
Some features in ${t.name} may behave in an unexpected manner.`,confirmText:"Don't show again",cancelText:"Close",onConfirm:()=>h.setItem(`__${t.name}_incompatible_dialog__`,"true")})}))}const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const re=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const le=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const b=o.Text;o.TextInput,o.TouchableHighlight;const v=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const E=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const L=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const l=o.FormRow,I=o.FormSection;o.FormSelect,o.FormSubLabel;const me=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;const C=window.enmity.modules.common.Components.General.Animated,[A,ce]=M(D.byProps("transitionToGuild"),D.byProps("setString"));var de=({manifest:t})=>{const e=N.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25},header:{color:w.ThemeColorMap.HEADER_PRIMARY,fontFamily:w.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:w.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),i=n.useRef(new C.Value(1)).current,a=()=>{C.spring(i,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},s=()=>{C.spring(i,{toValue:1,duration:250,useNativeDriver:!0}).start()},u=()=>{A.openURL("https://spin.rip/")},S={transform:[{scale:i}]};return n.createElement(n.Fragment,null,n.createElement(E,{style:e.container},n.createElement(v,{onPress:u,onPressIn:a,onPressOut:s},n.createElement(C.View,{style:[S]},n.createElement(re,{style:[e.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement(E,{style:e.text_container},n.createElement(v,{onPress:()=>{A.openURL(t.sourceUrl)}},n.createElement(b,{style:[e.main_text,e.header]},t.name," ")),n.createElement(E,{style:{flexDirection:"row"}},n.createElement(b,{style:[e.main_text,e.sub_header]},"A plugin by"),n.createElement(v,{onPress:()=>{A.openURL("https://spin.rip/")}},n.createElement(b,{style:[e.main_text,e.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},t.authors[0].name))),n.createElement(E,{style:{flexDirection:"row"}},n.createElement(b,{style:[e.main_text,e.sub_header]},"Settings page by"),n.createElement(v,{onPress:()=>{A.openURL("https://github.com/acquitelol/")}},n.createElement(b,{style:[e.main_text,e.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},"Acquite <3"))),n.createElement(E,null,n.createElement(v,{style:{flexDirection:"row"},onPress:()=>{ce.setString(`**${t.name}** v${t.version}`),P("plugin name and version")}},n.createElement(b,{style:[e.main_text,e.sub_header]},"Version:"),n.createElement(b,{style:[e.main_text,e.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},t.version," "))))))};const[ue,G]=M(D.byProps("transitionToGuild"),D.byProps("setString"));var ge=({manifest:t,settings:e,hasToasts:i,section:a,commands:s})=>{const u=N.createThemedStyleSheet({icon:{color:w.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:w.ThemeColorMap.TEXT_MUTED},text_container:{display:"flex",flexDirection:"column"}}),[S,F]=n.useState(),[g,p]=n.useState();return n.createElement(n.Fragment,null,n.createElement(le,{onTouchStart:m=>{F(m.nativeEvent.pageX),p(m.nativeEvent.pageY)},onTouchEnd:m=>{S-m.nativeEvent.pageX<-100&&g-m.nativeEvent.pageY<40&&g-m.nativeEvent.pageY>-40&&j.pop()}},n.createElement(de,{manifest:t}),a,s&&n.createElement(I,{title:"Plugin Commands"},s.map(m=>n.createElement(l,{label:`/${m.name}`,subLabel:m.description,leading:n.createElement(l.Icon,{style:u.icon,source:c.Settings.Commands}),trailing:l.Arrow,onPress:function(){G.setString(`/${m.name}`),P(`the command ${m.name}`)}}))),n.createElement(I,{title:"Utility"},i&&n.createElement(n.Fragment,null,n.createElement(l,{label:"Initialization Toasts",leading:n.createElement(l.Icon,{style:u.icon,source:c.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${t.name} is starting`,trailing:n.createElement(me,{value:e.getBoolean(`${t.name}-toastEnable`,!1),onValueChange:()=>{e.toggle(`${t.name}-toastEnable`,!1),y.open({content:`Successfully ${e.getBoolean(`${t.name}-toastEnable`,!1)?"enabled":"disabled"} initialization toasts.`,source:c.Settings.Toasts.Settings})}})}),n.createElement(L,null)),n.createElement(l,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${t.name} to clipboard.`,leading:n.createElement(l.Icon,{style:u.icon,source:c.Settings.Debug}),trailing:l.Arrow,onPress:async function(){G.setString(await te(t.name,t.version,t.build)),P("plugin debug information")}}),n.createElement(L,null),n.createElement(l,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(l.Icon,{style:u.icon,source:c.Delete}),trailing:l.Arrow,onPress:async function(){await h.removeItem("device_list"),y.open({content:"Cleared device list storage.",source:c.Settings.Toasts.Settings})}})),n.createElement(I,{title:"Source"},n.createElement(l,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${t.name}.`,leading:n.createElement(l.Icon,{style:u.icon,source:c.Copy}),trailing:l.Arrow,onPress:()=>{ie({manifest:t})}}),n.createElement(L,null),n.createElement(l,{label:"Source",subLabel:`View ${t.name} source code`,leading:n.createElement(l.Icon,{style:u.icon,source:c.Open}),trailing:l.Arrow,onPress:()=>{ue.openURL(`https://github.com/spinfal/enmity-plugins/tree/master/${t.name}`)}})),n.createElement(l,{label:`Plugin Version: ${t.version}
Plugin Build: ${t.build.split("-").pop()}`})))};const x=Y("Amongus"),$=R("_currentDispatchActionType","_subscriptions","_waitQueue"),pe={...d,onStart(){async function t(){await se(d)}$.dispatch({type:"LOAD_MESSAGES"}),$.dispatch({type:"LOAD_MESSAGES_SUCCESS",channelId:0,messages:[],isBefore:!1,isAfter:!1,hasMoreBefore:!1,hasMoreAfter:!1,limit:25,jump:void 0,isStale:!1,truncate:void 0});let e=0,i=3;const a=()=>{let s=Z(d.name,`${d.name}-toastEnable`,!1);try{e++,console.log(`[${d.name}] delayed start attempt ${e}/${i}.`),s&&y.open({content:`[${d.name}] start attempt ${e}/${i}.`,source:c.Debug});const u=$._actionHandlers._orderedActionHandlers.MESSAGE_CREATE.find(g=>g.name==="MessageStore"),S=$._actionHandlers._orderedActionHandlers.MESSAGE_UPDATE.find(g=>g.name==="MessageStore"),F=$._actionHandlers._orderedActionHandlers.LOAD_MESSAGES_SUCCESS.find(g=>g.name==="MessageStore");x.before(u,"actionHandler",(g,p)=>{p[0].message.content="sus"}),x.before(S,"actionHandler",(g,p)=>{p[0].message.content="sus"}),x.before(F,"actionHandler",(g,p)=>{p[0].messages=p[0].messages.map(m=>(m.content="sus",m))}),console.log(`${d.name} delayed start successful.`),s&&y.open({content:`${d.name} start successful.`,source:c.Settings.Toasts.Settings})}catch{e<i?(console.warn(`${d.name} failed to start. Trying again in ${e}0s.`),s&&y.open({content:`${d.name} failed to start trying again in ${e}0s.`,source:c.Failed}),setTimeout(a,e*1e4)):(console.error(`${d.name} failed to start. Giving up.`),y.open({content:`${d.name} failed to start. Giving up.`,source:c.Failed}))}};setTimeout(()=>{t(),a()},300)},onStop(){x.unpatchAll()},patches:[],getSettingsPanel({settings:t}){return n.createElement(ge,{manifest:d,settings:t,hasToasts:!0,section:null,commands:null})}};H(pe);
