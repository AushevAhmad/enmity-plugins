function Y(e){window.enmity.plugins.registerPlugin(e)}const T={byProps:(...e)=>window.enmity.modules.filters.byProps(...e),byName:(e,t)=>window.enmity.modules.filters.byName(e,t),byTypeName:(e,t)=>window.enmity.modules.filters.byTypeName(e,t),byDisplayName:(e,t)=>window.enmity.modules.filters.byDisplayName(e,t)};function B(...e){return window.enmity.modules.bulk(...e)}function R(...e){return window.enmity.modules.getByProps(...e)}window.enmity.modules.common;function j(e){return window.enmity.patcher.create(e)}const g=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const b=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const f=window.enmity.modules.common.Storage,w=window.enmity.modules.common.Toasts,D=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const N=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const z=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const U=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;var W="piss",X="1.0.0",q="patch-1.0.5",J="piss",K=[{name:"piss",id:"308440976723148800"}],Q="#ff0069",Z="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/piss.js",u={name:W,version:X,build:q,description:J,authors:K,color:Q,sourceUrl:Z};function ee(e,t,i){return window.enmity.settings.getBoolean(e,t,i)}function te(e){return window.enmity.settings.makeStore(e)}const k=e=>{let t=0;for(let i in e)t++;return t},ne=e=>{let t=e.split(`
`).map(i=>{if(i!="")return`"${i.replaceAll(":",'":"').replace(" ","")}",`});return t[0]=`{${t[0]}`,t[k(t)]=`${t[k(t)]}}`,t=t.join(""),t=t.replaceAll("undefined",""),t=t.split("").reverse().join("").replace(",","").split("").reverse().join(""),t};async function V(){try{let e=await f.getItem("device_list");if(e)return JSON.parse(e);let t=(await N.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,i=ne(t);await f.setItem("device_list",i);let a=await f.getItem("device_list");return JSON.parse(a)}catch(e){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${e}]`);return}}async function oe(e,t,i){let a=await V();return`**[${e}] Debug Information**
> **Plugin Version:** ${t}
> **Plugin Build:** ${i.split("-")[1]}
> **Discord Build:** ${b.InfoDictionaryManager.Version} (${b.InfoDictionaryManager.Build})
> **Software Version:** ${b.DCDDeviceManager.systemVersion}
> **Device:** ${a[b.DCDDeviceManager.device]}`}function l(e){return window.enmity.assets.getIDByName(e)}const d={Debug:l("debug"),Retry:l("ic_message_retry"),Failed:l("Small"),Cancel:l("ic_megaphone_nsfw_16px"),Add:l("add_white"),Delete:l("ic_message_delete"),Clear:l("ic_clear_all_24px"),Pencil:l("ic_pencil_24px"),Copy:l("toast_copy_link"),Open:l("ic_leave_stage"),Clipboard:l("pending-alert"),Debug_Command:{Sent:l("ic_application_command_24px"),Clock:l("clock")},Settings:{Toasts:{Context:l("toast_image_saved"),Settings:l("ic_selection_checked_24px")},Share:l("share"),Commands:l("ic_profile_badge_bot_commands"),Debug:l("ic_rulebook_16px")}},F=e=>{w.open({content:`Copied ${e} to clipboard.`,source:d.Clipboard})},{native:S}=window.enmity;function ie(){S.reload()}S.version,S.build,S.device,S.version;const ae=R("transitionToGuild");async function se({manifest:e}){const t=`${e.sourceUrl}?${Math.floor(Math.random()*1001)}.js`,i=await(await N.get(t)).text;let a=i.match(/\d\.\d\.\d+/g),s=i.match(/patch\-\d\.\d\.\d+/g);return!a||!s?G(e.name,e.version):(a=a[0],s=s[0],a!=e.version?O(t,a,s.split("-")[1],e,!1):s!=e.build?O(t,a,s.split("-")[1],e,!0):G(e.name,e.version))}const O=(e,t,i,a,s)=>{const c=s?i:t;D.show({title:"Update found",body:`A newer ${s?"build":"version"} is available for ${a.name}. ${s?`
The version will remain at ${t}, but the build will update to ${i}.`:""}
Would you like to install ${s?`build \`${i}\``:`version \`${t}\``}  now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>re(e,c,a,s)})},G=(e,t)=>{console.log(`[${e}] Plugin is on the latest version, which is ${t}`),w.open({content:`${e} is on latest version (${t})`,source:d.Settings.Toasts.Settings})};async function re(e,t,i,a){window.enmity.plugins.installPlugin(e,({data:s})=>{s=="installed_plugin"||s=="overridden_plugin"?D.show({title:`Updated ${i.name}`,body:`Successfully updated to ${a?"build":"version"} \`${t}\`. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Not now",onConfirm:()=>{ie()}}):D.show({title:"Error",body:`Something went wrong while updating ${i.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{ae.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${i.name}%20Update%20Error%3A%20${a?`b${t}`:`v${t}`}`)}})})}async function le(e){let t=b.DCDDeviceManager.device,i=await V();t.includes("iPhone")&&(t=t.replace("iPhone",""),t=t.replace(",","."),(parseFloat(t)<10.6&&parseFloat(t)!=10.3||parseFloat(t)==14.6||parseFloat(t)==12.8)&&f.getItem(`__${e.name}_incompatible_dialog__`).then(a=>{a!=null||D.show({title:"Incompatible iPhone",body:`Please note that you're on an${i[b.DCDDeviceManager.device]}.
Some features in ${e.name} may behave in an unexpected manner.`,confirmText:"Don't show again",cancelText:"Close",onConfirm:()=>f.setItem(`__${e.name}_incompatible_dialog__`,"true")})}))}const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const me=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const ce=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const y=o.Text;o.TextInput,o.TouchableHighlight;const _=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const v=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const L=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const m=o.FormRow,I=o.FormSection;o.FormSelect,o.FormSubLabel;const de=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;const C=window.enmity.modules.common.Components.General.Animated,[x,ue]=B(T.byProps("transitionToGuild"),T.byProps("setString"));var pe=({manifest:e})=>{const t=U.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25},header:{color:g.ThemeColorMap.HEADER_PRIMARY,fontFamily:g.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:g.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),i=n.useRef(new C.Value(1)).current,a=()=>{C.spring(i,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},s=()=>{C.spring(i,{toValue:1,duration:250,useNativeDriver:!0}).start()},c=()=>{x.openURL("https://spin.rip/")},h={transform:[{scale:i}]};return n.createElement(n.Fragment,null,n.createElement(v,{style:t.container},n.createElement(_,{onPress:c,onPressIn:a,onPressOut:s},n.createElement(C.View,{style:[h]},n.createElement(me,{style:[t.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement(v,{style:t.text_container},n.createElement(_,{onPress:()=>{x.openURL(e.sourceUrl)}},n.createElement(y,{style:[t.main_text,t.header]},e.name," ")),n.createElement(v,{style:{flexDirection:"row"}},n.createElement(y,{style:[t.main_text,t.sub_header]},"A plugin by"),n.createElement(_,{onPress:()=>{x.openURL("https://spin.rip/")}},n.createElement(y,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},e.authors[0].name))),n.createElement(v,{style:{flexDirection:"row"}},n.createElement(y,{style:[t.main_text,t.sub_header]},"Settings page by"),n.createElement(_,{onPress:()=>{x.openURL("https://github.com/acquitelol/")}},n.createElement(y,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},"Acquite <3"))),n.createElement(v,null,n.createElement(_,{style:{flexDirection:"row"},onPress:()=>{ue.setString(`**${e.name}** v${e.version}`),F("plugin name and version")}},n.createElement(y,{style:[t.main_text,t.sub_header]},"Version:"),n.createElement(y,{style:[t.main_text,t.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},e.version," "))))))};const[ge,H]=B(T.byProps("transitionToGuild"),T.byProps("setString"));var we=({manifest:e,settings:t,hasToasts:i,section:a,commands:s})=>{const c=U.createThemedStyleSheet({bottom_padding:{paddingBottom:25},icon:{color:g.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:g.ThemeColorMap.TEXT_MUTED},text_container:{display:"flex",flexDirection:"column"}}),[h,P]=n.useState(),[$,p]=n.useState();return n.createElement(n.Fragment,null,n.createElement(ce,{onTouchStart:r=>{P(r.nativeEvent.pageX),p(r.nativeEvent.pageY)},onTouchEnd:r=>{h-r.nativeEvent.pageX<-100&&$-r.nativeEvent.pageY<40&&$-r.nativeEvent.pageY>-40&&z.pop()}},n.createElement(pe,{manifest:e}),a,s&&n.createElement(I,{title:"Plugin Commands"},s.map(r=>n.createElement(m,{label:`/${r.name}`,subLabel:r.description,leading:n.createElement(m.Icon,{style:c.icon,source:d.Settings.Commands}),trailing:m.Arrow,onPress:function(){H.setString(`/${r.name}`),F(`the command ${r.name}`)}}))),n.createElement(I,{title:"Utility"},i&&n.createElement(n.Fragment,null,n.createElement(m,{label:"Initialization Toasts",leading:n.createElement(m.Icon,{style:c.icon,source:d.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${e.name} is starting`,trailing:n.createElement(de,{value:t.getBoolean(`${e.name}-toastEnable`,!1),onValueChange:()=>{t.toggle(`${e.name}-toastEnable`,!1),w.open({content:`Successfully ${t.getBoolean(`${e.name}-toastEnable`,!1)?"enabled":"disabled"} initialization toasts.`,source:d.Settings.Toasts.Settings})}})}),n.createElement(L,null)),n.createElement(m,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${e.name} to clipboard.`,leading:n.createElement(m.Icon,{style:c.icon,source:d.Settings.Debug}),trailing:m.Arrow,onPress:async function(){H.setString(await oe(e.name,e.version,e.build)),F("plugin debug information")}}),n.createElement(L,null),n.createElement(m,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(m.Icon,{style:c.icon,source:d.Delete}),trailing:m.Arrow,onPress:async function(){await f.removeItem("device_list"),w.open({content:"Cleared device list storage.",source:d.Settings.Toasts.Settings})}})),n.createElement(I,{title:"Source"},n.createElement(m,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${e.name}.`,leading:n.createElement(m.Icon,{style:c.icon,source:d.Copy}),trailing:m.Arrow,onPress:()=>{se({manifest:e})}}),n.createElement(L,null),n.createElement(m,{label:"Source",subLabel:`View ${e.name} source code`,leading:n.createElement(m.Icon,{style:c.icon,source:d.Open}),trailing:m.Arrow,onPress:()=>{ge.openURL(`https://github.com/spinfal/enmity-plugins/tree/master/${e.name}`)}})),n.createElement(m,{style:c.bottom_padding,label:`Plugin Version: ${e.version}
Plugin Build: ${e.build.split("-").pop()}`})))};const A=j("PISS"),E=R("_currentDispatchActionType","_subscriptions","_waitQueue"),ye={...u,onStart(){async function e(){await le(u)}const t=te(this.name);E.dispatch({type:"LOAD_MESSAGES"}),t.set("test","test"),E.dispatch({type:"LOAD_MESSAGES_SUCCESS",channelId:0,messages:[],isBefore:!1,isAfter:!1,hasMoreBefore:!1,hasMoreAfter:!1,limit:25,jump:void 0,isStale:!1,truncate:void 0});let i=0,a=3;const s=()=>{let c=ee(u.name,`${u.name}-toastEnable`,!1);try{i++,console.log(`[${u.name}] delayed start attempt ${i}/${a}.`),c&&w.open({content:`[${u.name}] start attempt ${i}/${a}.`,source:d.Debug});const h=E._actionHandlers._orderedActionHandlers.MESSAGE_CREATE.find(p=>p.name==="MessageStore"),P=E._actionHandlers._orderedActionHandlers.MESSAGE_UPDATE.find(p=>p.name==="MessageStore"),$=E._actionHandlers._orderedActionHandlers.LOAD_MESSAGES_SUCCESS.find(p=>p.name==="MessageStore");A.before(h,"actionHandler",(p,r)=>{r[0].message.content="piss"}),A.before(P,"actionHandler",(p,r)=>{r[0].message.content="piss"}),A.before($,"actionHandler",(p,r)=>{r[0].messages=r[0].messages.map(M=>(M.content="piss",M))}),console.log(`${u.name} delayed start successful.`),c&&w.open({content:`${u.name} start successful.`,source:d.Settings.Toasts.Settings})}catch{i<a?(console.warn(`${u.name} failed to start. Trying again in ${i}0s.`),c&&w.open({content:`${u.name} failed to start trying again in ${i}0s.`,source:d.Failed}),setTimeout(s,i*1e4)):(console.error(`${u.name} failed to start. Giving up.`),w.open({content:`${u.name} failed to start. Giving up.`,source:d.Failed}))}};setTimeout(()=>{e(),s()},300)},onStop(){A.unpatchAll()},patches:[],getSettingsPanel({settings:e}){return n.createElement(we,{manifest:u,settings:e,hasToasts:!0,section:null,commands:null})}};Y(ye);
