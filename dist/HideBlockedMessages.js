function j(t){window.enmity.plugins.registerPlugin(t)}const T={byProps:(...t)=>window.enmity.modules.filters.byProps(...t),byName:(t,e)=>window.enmity.modules.filters.byName(t,e),byTypeName:(t,e)=>window.enmity.modules.filters.byTypeName(t,e),byDisplayName:(t,e)=>window.enmity.modules.filters.byDisplayName(t,e)};function k(...t){return window.enmity.modules.bulk(...t)}function A(...t){return window.enmity.modules.getByProps(...t)}window.enmity.modules.common;function z(t){return window.enmity.patcher.create(t)}const w=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const h=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const v=window.enmity.modules.common.Storage,y=window.enmity.modules.common.Toasts,D=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const N=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users;const W=window.enmity.modules.common.Navigation;window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const U=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;var X="HideBlockedMessages",q="1.3.6",J="patch-1.0.10",K="For when you really need to shut someone the f*** up.",Q=[{name:"Marek (modified by spin)",id:"308440976723148800"}],Z="#ff0069",ee="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/HideBlockedMessages.js",d={name:X,version:q,build:J,description:K,authors:Q,color:Z,sourceUrl:ee};function te(t,e,i){return window.enmity.settings.getBoolean(t,e,i)}const V=t=>{let e=0;for(let i in t)e++;return e},ne=t=>{let e=t.split(`
`).map(i=>{if(i!="")return`"${i.replaceAll(":",'":"').replace(" ","")}",`});return e[0]=`{${e[0]}`,e[V(e)]=`${e[V(e)]}}`,e=e.join(""),e=e.replaceAll("undefined",""),e=e.split("").reverse().join("").replace(",","").split("").reverse().join(""),e};async function H(){try{let t=await v.getItem("device_list");if(t)return JSON.parse(t);let e=(await N.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,i=ne(e);await v.setItem("device_list",i);let a=await v.getItem("device_list");return JSON.parse(a)}catch(t){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${t}]`);return}}async function oe(t,e,i){let a=await H();return`**[${t}] Debug Information**
> **Plugin Version:** ${e}
> **Plugin Build:** ${i.split("-")[1]}
> **Discord Build:** ${h.InfoDictionaryManager.Version} (${h.InfoDictionaryManager.Build})
> **Software Version:** ${h.DCDDeviceManager.systemVersion}
> **Device:** ${a[h.DCDDeviceManager.device]}`}function r(t){return window.enmity.assets.getIDByName(t)}const u={Debug:r("debug"),Retry:r("ic_message_retry"),Failed:r("Small"),Cancel:r("ic_megaphone_nsfw_16px"),Add:r("add_white"),Delete:r("ic_message_delete"),Clear:r("ic_clear_all_24px"),Pencil:r("ic_pencil_24px"),Copy:r("toast_copy_link"),Open:r("ic_leave_stage"),Clipboard:r("pending-alert"),Debug_Command:{Sent:r("ic_application_command_24px"),Clock:r("clock")},Settings:{Toasts:{Context:r("toast_image_saved"),Settings:r("ic_selection_checked_24px")},Share:r("share"),Commands:r("ic_profile_badge_bot_commands"),Debug:r("ic_rulebook_16px")}},L=t=>{y.open({content:`Copied ${t} to clipboard.`,source:u.Clipboard})},{native:S}=window.enmity;function ie(){S.reload()}S.version,S.build,S.device,S.version;const ae=A("transitionToGuild");async function se({manifest:t}){const e=`${t.sourceUrl}?${Math.floor(Math.random()*1001)}.js`,i=await(await N.get(e)).text;let a=i.match(/\d\.\d\.\d+/g),s=i.match(/patch\-\d\.\d\.\d+/g);return!a||!s?G(t.name,t.version):(a=a[0],s=s[0],a!=t.version?O(e,a,s.split("-")[1],t,!1):s!=t.build?O(e,a,s.split("-")[1],t,!0):G(t.name,t.version))}const O=(t,e,i,a,s)=>{const c=s?i:e;D.show({title:"Update found",body:`A newer ${s?"build":"version"} is available for ${a.name}. ${s?`
The version will remain at ${e}, but the build will update to ${i}.`:""}
Would you like to install ${s?`build \`${i}\``:`version \`${e}\``}  now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>le(t,c,a,s)})},G=(t,e)=>{console.log(`[${t}] Plugin is on the latest version, which is ${e}`),y.open({content:`${t} is on latest version (${e})`,source:u.Settings.Toasts.Settings})};async function le(t,e,i,a){window.enmity.plugins.installPlugin(t,({data:s})=>{s=="installed_plugin"||s=="overridden_plugin"?D.show({title:`Updated ${i.name}`,body:`Successfully updated to ${a?"build":"version"} \`${e}\`. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Not now",onConfirm:()=>{ie()}}):D.show({title:"Error",body:`Something went wrong while updating ${i.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{ae.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${i.name}%20Update%20Error%3A%20${a?`b${e}`:`v${e}`}`)}})})}async function re(t){let e=h.DCDDeviceManager.device,i=await H();e.includes("iPhone")&&(e=e.replace("iPhone",""),e=e.replace(",","."),(parseFloat(e)<10.6&&parseFloat(e)!=10.3||parseFloat(e)==14.6||parseFloat(e)==12.8)&&v.getItem(`__${t.name}_incompatible_dialog__`).then(a=>{a!=null||D.show({title:"Incompatible iPhone",body:`Please note that you're on an${i[h.DCDDeviceManager.device]}.
Some features in ${t.name} may behave in an unexpected manner.`,confirmText:"Don't show again",cancelText:"Close",onConfirm:()=>v.setItem(`__${t.name}_incompatible_dialog__`,"true")})}))}const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const me=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const ce=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const f=o.Text;o.TextInput,o.TouchableHighlight;const E=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const $=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const I=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const m=o.FormRow,B=o.FormSection;o.FormSelect,o.FormSubLabel;const de=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;const C=window.enmity.modules.common.Components.General.Animated,[x,ue]=k(T.byProps("transitionToGuild"),T.byProps("setString"));var ge=({manifest:t})=>{const e=U.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25},header:{color:w.ThemeColorMap.HEADER_PRIMARY,fontFamily:w.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:w.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}}),i=n.useRef(new C.Value(1)).current,a=()=>{C.spring(i,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},s=()=>{C.spring(i,{toValue:1,duration:250,useNativeDriver:!0}).start()},c=()=>{x.openURL("https://spin.rip/")},_={transform:[{scale:i}]};return n.createElement(n.Fragment,null,n.createElement($,{style:e.container},n.createElement(E,{onPress:c,onPressIn:a,onPressOut:s},n.createElement(C.View,{style:[_]},n.createElement(me,{style:[e.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement($,{style:e.text_container},n.createElement(E,{onPress:()=>{x.openURL(t.sourceUrl)}},n.createElement(f,{style:[e.main_text,e.header]},t.name," ")),n.createElement($,{style:{flexDirection:"row"}},n.createElement(f,{style:[e.main_text,e.sub_header]},"A plugin by"),n.createElement(E,{onPress:()=>{x.openURL("https://spin.rip/")}},n.createElement(f,{style:[e.main_text,e.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},t.authors[0].name))),n.createElement($,{style:{flexDirection:"row"}},n.createElement(f,{style:[e.main_text,e.sub_header]},"Settings page by"),n.createElement(E,{onPress:()=>{x.openURL("https://github.com/acquitelol/")}},n.createElement(f,{style:[e.main_text,e.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},"Acquite <3"))),n.createElement($,null,n.createElement(E,{style:{flexDirection:"row"},onPress:()=>{ue.setString(`**${t.name}** v${t.version}`),L("plugin name and version")}},n.createElement(f,{style:[e.main_text,e.sub_header]},"Version:"),n.createElement(f,{style:[e.main_text,e.sub_header,{paddingLeft:4,fontFamily:w.Fonts.DISPLAY_BOLD}]},t.version," "))))))};const[pe,Y]=k(T.byProps("transitionToGuild"),T.byProps("setString"));var we=({manifest:t,settings:e,hasToasts:i,section:a,commands:s})=>{const c=U.createThemedStyleSheet({icon:{color:w.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:w.ThemeColorMap.TEXT_MUTED},text_container:{display:"flex",flexDirection:"column"}}),[_,P]=n.useState(),[g,p]=n.useState();return n.createElement(n.Fragment,null,n.createElement(ce,{onTouchStart:l=>{P(l.nativeEvent.pageX),p(l.nativeEvent.pageY)},onTouchEnd:l=>{_-l.nativeEvent.pageX<-100&&g-l.nativeEvent.pageY<40&&g-l.nativeEvent.pageY>-40&&W.pop()}},n.createElement(ge,{manifest:t}),a,s&&n.createElement(B,{title:"Plugin Commands"},s.map(l=>n.createElement(m,{label:`/${l.name}`,subLabel:l.description,leading:n.createElement(m.Icon,{style:c.icon,source:u.Settings.Commands}),trailing:m.Arrow,onPress:function(){Y.setString(`/${l.name}`),L(`the command ${l.name}`)}}))),n.createElement(B,{title:"Utility"},i&&n.createElement(n.Fragment,null,n.createElement(m,{label:"Initialization Toasts",leading:n.createElement(m.Icon,{style:c.icon,source:u.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${t.name} is starting`,trailing:n.createElement(de,{value:e.getBoolean(`${t.name}-toastEnable`,!1),onValueChange:()=>{e.toggle(`${t.name}-toastEnable`,!1),y.open({content:`Successfully ${e.getBoolean(`${t.name}-toastEnable`,!1)?"enabled":"disabled"} initialization toasts.`,source:u.Settings.Toasts.Settings})}})}),n.createElement(I,null)),n.createElement(m,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${t.name} to clipboard.`,leading:n.createElement(m.Icon,{style:c.icon,source:u.Settings.Debug}),trailing:m.Arrow,onPress:async function(){Y.setString(await oe(t.name,t.version,t.build)),L("plugin debug information")}}),n.createElement(I,null),n.createElement(m,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(m.Icon,{style:c.icon,source:u.Delete}),trailing:m.Arrow,onPress:async function(){await v.removeItem("device_list"),y.open({content:"Cleared device list storage.",source:u.Settings.Toasts.Settings})}})),n.createElement(B,{title:"Source"},n.createElement(m,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${t.name}.`,leading:n.createElement(m.Icon,{style:c.icon,source:u.Copy}),trailing:m.Arrow,onPress:()=>{se({manifest:t})}}),n.createElement(I,null),n.createElement(m,{label:"Source",subLabel:`View ${t.name} source code`,leading:n.createElement(m.Icon,{style:c.icon,source:u.Open}),trailing:m.Arrow,onPress:()=>{pe.openURL(`https://github.com/spinfal/enmity-plugins/tree/master/${t.name}`)}})),n.createElement(m,{label:`Plugin Version: ${t.version}
Plugin Build: ${t.build.split("-").pop()}`})))};const F=z("HideBlockedMessages"),M=A("_currentDispatchActionType","_subscriptions","_waitQueue"),R=A("isBlocked","isFriend"),ye={...d,onStart(){async function t(){await re(d)}let e=0,i=3;const a=()=>{let s=te(d.name,`${d.name}-toastEnable`,!1);try{e++,console.log(`${d.name} delayed start attempt ${e}/${i}.`),s&&y.open({content:`${d.name} start attempt ${e}/${i}.`,source:u.Debug});const c=M._actionHandlers._orderedActionHandlers.LOAD_MESSAGES_SUCCESS.find(g=>g.name==="MessageStore"),_=M._actionHandlers._orderedActionHandlers.MESSAGE_CREATE.find(g=>g.name==="MessageStore"),P=M._actionHandlers._orderedActionHandlers.MESSAGE_UPDATE.find(g=>g.name==="MessageStore");F.before(_,"actionHandler",(g,p)=>{var l;const b=p[0].message;p[0].message=R.isBlocked((l=b==null?void 0:b.author)==null?void 0:l.id)?null:b}),F.before(P,"actionHandler",(g,p)=>{var l;const b=p[0].message;p[0].message=R.isBlocked((l=b==null?void 0:b.author)==null?void 0:l.id)?null:b}),F.before(c,"actionHandler",(g,p)=>{p[0].messages=p[0].messages.filter(l=>!R.isBlocked(l.author.id))}),console.log(`${d.name} delayed start successful.`),s&&y.open({content:`${d.name} start successful.`,source:u.Settings.Toasts.Settings})}catch(c){console.log(`[${d.name} Error]`,c),e<i?(console.warn(`${d.name} failed to start. Trying again in ${e}0s.`),s&&y.open({content:`${d.name} failed to start trying again in ${e}0s.`,source:u.Failed}),setTimeout(a,e*1e4)):(console.error(`${d.name} failed to start. Giving up.`),y.open({content:`${d.name} failed to start. Giving up.`,source:u.Failed}))}};setTimeout(()=>{t(),a()},300)},onStop(){F.unpatchAll()},patches:[],getSettingsPanel({settings:t}){return n.createElement(we,{manifest:d,settings:t,hasToasts:!0,section:null,commands:null})}};j(ye);
